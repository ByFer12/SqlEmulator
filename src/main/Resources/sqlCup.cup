package inicio.flexycup;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import inicio.excecuteQuery.*;
import inicio.view.Inicio;

import java.util.LinkedList;
parser code {:

    public static LinkedList<Errors> erroresSintacticos=new LinkedList<Errors>();
    public static List<String> col= new ArrayList<>();
    public static List<String> path= new ArrayList<>();
    public static List<String> cond= new ArrayList<>();
    public static List<String> valores= new ArrayList<>();
    // Connect this parser to a scanner!
    public parser(SqlLexer lex) {
	    super(lex);
	  }

    public void syntax_error(Symbol s) {
           String lexema=s.value.toString();
           int columna=s.right;
           int fila=s.left;
           System.out.println("Error Sintactico: "+lexema+" en fila: "+fila+" y columna: "+columna);
           Inicio.errores.setText("Error Sintactico: "+lexema+" en fila: "+fila+" y columna: "+columna);
           Inicio.btnErrors.setVisible(true);
           Errors er=new Errors(lexema,"Error sintactico","No se esperaba ese tokenn",fila,columna);
           Inicio.errors=true;
           erroresSintacticos.add(er);
        }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
           String lexema=s.value.toString();
           int columna=s.right;
           int fila=s.left;
           System.out.println("Error Sintactico: "+lexema+" en fila: "+fila+" y columna: "+columna);
           Inicio.errores.setText("Error Sintactico: "+lexema+" en fila: "+fila+" y columna: "+columna);
           Inicio.btnErrors.setVisible(true);
           Errors er=new Errors(lexema,"Error sintactico","No se esperaba ese tokenn",fila,columna);
           Inicio.errors=true;
           erroresSintacticos.add(er);
    }
:}

/* Terminals (tokens returned by the scanner). */
terminal             SELEC,INSERT,VALORES,EN,FILT,OR,AND,ELIMINAR,ACTU,ASIGN;
terminal            NUM,ID,COMA,AST,PUNTO,STRING,IGUAL,PCOMA,MENIGUAL,MAYIGUAL,MAY,MEN,PARENA,PARENC;



/* Non-terminals */
non terminal     sql_query,actu, column, direccion, condicion,sel,ins,eli,valores,asignaciones;

/* The grammar */


start with sql_query;


sql_query::=sel
            |ins
            |eli
            |actu
            ;
sel::=SELEC column:colu EN direccion FILT condicion PCOMA{:
                                                                    SqlSelect sel=new SqlSelect(col,path,cond);

                                                                :}
            | SELEC column EN direccion PCOMA{:
                                               SqlSelect sel=new SqlSelect(col,path);

                                                :};

ins::= INSERT EN direccion:d VALORES PARENA valores PARENC PCOMA {:SqlInsert insert=new SqlInsert(path,valores);:}
        |INSERT EN direccion PARENA column PARENC  VALORES PARENA valores PARENC PCOMA {:SqlInsert insert=new SqlInsert(path,valores,col);:}
        ;

eli::=ELIMINAR EN direccion FILT condicion PCOMA {:SqlDelete del= new SqlDelete(cond, path);:}
        |ELIMINAR EN direccion PCOMA{:SqlDelete del= new SqlDelete(path);:}
        ;

actu::= ACTU EN direccion ASIGN asignaciones FILT condicion AND  condicion PCOMA
        |ACTU EN direccion ASIGN asignaciones PCOMA
        ;

asignaciones::=asignaciones COMA condicion
                |condicion
                ;

valores::= valores COMA STRING:s {:valores.add(s.toString());:}
            |valores COMA NUM:n {:valores.add(n.toString());:}
            |STRING:s {:valores.add(s.toString());:}
            |NUM:n {:valores.add(n.toString());:};


column::= column:colu COMA:c ID:i {:col.add(i.toString());:}
          |ID:i{:
                 col.add(i.toString());
               :}
          |AST:as {:
                    col.add(as.toString());
                  :};

direccion::=direccion PUNTO ID:i {:path.add(i.toString());:}
            |ID:i {:path.add(i.toString());:};

condicion::=ID:i IGUAL:m STRING:s {:
                                    cond.add(i.toString());
                                    cond.add(m.toString());
                                    cond.add(s.toString());
                                :}
            |ID:i  IGUAL:m NUM:n {:
                                    cond.add(i.toString());
                                    cond.add(m.toString());
                                    cond.add(n.toString());
                                  :}
            |ID:i  MENIGUAL:m NUM:n {:
                                    cond.add(i.toString());
                                    cond.add(m.toString());
                                    cond.add(n.toString());
                                  :}
            |ID:i  MAYIGUAL:m NUM:n {:
                                    cond.add(i.toString());
                                    cond.add(m.toString());
                                    cond.add(n.toString());
                                  :}
            |ID:i  MAY:m NUM:n {:
                                    cond.add(i.toString());
                                    cond.add(m.toString());
                                    cond.add(n.toString());
                                   :}
            |ID:i  MEN:m NUM:n {:
                                    cond.add(i.toString());
                                    cond.add(m.toString());
                                    cond.add(n.toString());
                                    :};


